{"version":3,"sources":["components/head/ToDoHead.js","components/items/ToDoItem.js","components/items/ToDoItemList.js","components/add/ToDoInput.js","components/add/ToDoAdd.js","components/add/ToDoInputContainer.js","App.js","serviceWorker.js","index.js"],"names":["ToDoHead","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","react","onClick","refreshFn","Component","TdText","styled","TableCell","wordBreak","DeleteButton","Button","backgroundColor","&:hover","color","ToDoItem","_this","state","deleteClickFn","e","deleteItemToLocalStorageFn","guid","onClickFn","setState","getBackgroundColor","checked","checkChangeFn","console","log","TableRow","style","colSpan","todoText","created","TodoTable","Table","TodoTableHead","TableHead","StyledTableCell","StyledButton","ToDoItemList","window","confirm","clearFn","_this2","todoList","todoItemList","map","_ref","items_ToDoItem","updateFn","defaultProps","TodoInput","Input","width","ToDoInput","placeholder","onChange","keyChange","value","input","ToDoAdd","ToDoAdd_StyledButton","addTodoItemFn","buttonName","ToDoInputContainer","add_ToDoInput","add_ToDoAdd","localStorageKey","App","getItemFromLocalStorage","refresh","location","reload","target","addTodoItem","length","newItem","createGuid","getFormatDate","Date","concat","addItemToLocalStorage","updateTodoItem","todo","dataList","updateTarget","find","d","sortByChecked","updateItemToLocalStorage","deleteItemToLocalStorage","localData","Array","isArray","filtered","filter","localStorage","setItem","JSON","stringify","clearLocalStorage","replace","c","r","Math","random","toString","date","year","getFullYear","month","getMonth","day","getDate","text","localDataStr","getItem","parse","push","encodedData","localStorageData","parsedData","unchecked","_this$state","className","head_ToDoHead","add_ToDoInputContainer","items_ToDoItemList","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97aab873.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nclass ToDoHead extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h2 onClick={this.props.refreshFn}>Todo List by KJT</h2>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoHead;\r\n\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/styles';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst TdText = styled(TableCell)({\r\n    wordBreak: \"break-all\"\r\n});\r\n\r\nconst DeleteButton = styled(Button)({\r\n    backgroundColor: 'rgba(90, 87, 255)',\r\n    \"&:hover\": {\r\n        backgroundColor: 'rgba(90, 87, 255)'\r\n    },\r\n    color: 'rgba(255, 255, 255)'\r\n});\r\n\r\nclass ToDoItem extends Component {\r\n    state = {\r\n        backgroundColor: 'rgba(204, 255, 252)'\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props.checked);\r\n        this.state = {\r\n            backgroundColor: this.getBackgroundColor(this.props.checked)\r\n        }\r\n    }\r\n\r\n    getBackgroundColor(checked) {\r\n        return checked ? 'rgba(255, 91, 79)' : 'rgba(204, 255, 252)';\r\n    }\r\n\r\n    deleteClickFn = (e) => {\r\n        this.props.deleteItemToLocalStorageFn(this.props.guid);\r\n    }\r\n\r\n    onClickFn = (e) => {\r\n        this.setState({\r\n            backgroundColor: this.getBackgroundColor(!this.props.checked)\r\n        });\r\n        this.props.checkChangeFn(this.props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <TableRow style={{backgroundColor: this.getBackgroundColor(this.props.checked)}}>\r\n                <TdText colSpan={7} onClick={this.onClickFn}>\r\n                    {this.props.todoText}\r\n                </TdText>\r\n                <TdText colSpan={5}>{this.props.created}</TdText>\r\n                <TdText colSpan={1}>\r\n                    <DeleteButton onClick={this.deleteClickFn}>X</DeleteButton>\r\n                </TdText>\r\n            </TableRow>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoItem;","import React, { Component } from 'react';\r\nimport ToDoItem from './ToDoItem';\r\nimport Table from '@material-ui/core/Table';\r\nimport { styled } from '@material-ui/styles';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst TodoTable = styled(Table)({\r\n    backgroundColor: 'rgba(237, 255, 254)'\r\n});\r\n\r\nconst TodoTableHead = styled(TableHead)({\r\n    // backgroundColor: 'rgba(0, 8, 54)',\r\n    // color: 'rgba(255, 255, 255)'\r\n});\r\n\r\nconst StyledTableCell = styled(TableCell)({\r\n    backgroundColor: 'rgba(0, 8, 54)',\r\n    color: 'rgba(255, 255, 255)'\r\n});\r\n\r\nconst StyledButton = styled(Button)({\r\n    backgroundColor: 'rgba(90, 87, 255)',\r\n    \"&:hover\": {\r\n        backgroundColor: 'rgba(90, 87, 255)'\r\n    },\r\n    color: 'rgba(255, 255, 255)'\r\n});\r\n\r\nclass ToDoItemList extends Component {    \r\n    static defaultProps = {\r\n        todoItemList: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onClickFn = (e) => {\r\n        var val = window.confirm(\"정말입니까 닝겐?\");\r\n        if (val) {\r\n            this.props.clearFn();\r\n        }\r\n    }\r\n    \r\n    render () {\r\n        const todoList = this.props.todoItemList.map(\r\n            ({guid, todoText, created, checked}) => (\r\n                <ToDoItem \r\n                    guid={guid}\r\n                    todoText={todoText}\r\n                    created={created}\r\n                    checked={checked}\r\n                    deleteItemToLocalStorageFn={this.props.deleteItemToLocalStorageFn}\r\n                    checkChangeFn={this.props.updateFn}\r\n                />\r\n            )\r\n        );\r\n        return (\r\n            <TodoTable>\r\n                <TodoTableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell colSpan={7}>Things to do</StyledTableCell>\r\n                        <StyledTableCell colSpan={5}>Created</StyledTableCell>\r\n                        <StyledTableCell colSpan={1}>\r\n                            <StyledButton onClick={this.onClickFn}>Clear</StyledButton>\r\n                        </StyledTableCell>\r\n                    </TableRow>\r\n                </TodoTableHead>\r\n                {todoList}\r\n            </TodoTable>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoItemList;","import React, { Component, Fragment } from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport { styled } from '@material-ui/styles';\r\n\r\nconst TodoInput = styled(Input)({\r\n    width: \"60%\"\r\n});\r\n\r\nclass ToDoInput extends Component {\r\n    static defaultProps = {\r\n        placeholder: \"Add your todo...\"\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <TodoInput \r\n                    placeholder={this.props.placeholder} \r\n                    onChange={this.props.keyChange} \r\n                    value={this.props.input}></TodoInput>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoInput;","import React, { Component, Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/styles';\r\n\r\nconst StyledButton = styled(Button)({\r\n    backgroundColor: 'rgba(218, 222, 158)',\r\n    \"&:hover\": {\r\n        backgroundColor: 'rgba(218, 222, 158)'\r\n    }\r\n});\r\n\r\nclass ToDoAdd extends Component {\r\n    static defaultProps = {\r\n        buttonName: 'default button name'\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <StyledButton \r\n                    onClick={this.props.addTodoItemFn}>\r\n                    {this.props.buttonName}\r\n                </StyledButton>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoAdd;","import React, { Component, Fragment } from 'react';\r\nimport ToDoInput from './ToDoInput';\r\nimport ToDoAdd from './ToDoAdd';\r\n\r\nconst ToDoInputContainer = ({addTodoItemFn, input, keyChange}) => {\r\n    return (\r\n        <Fragment >\r\n            <ToDoInput input={input}\r\n                keyChange={keyChange}></ToDoInput>\r\n            <ToDoAdd buttonName={\"Add\"} addTodoItemFn={addTodoItemFn}></ToDoAdd>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default ToDoInputContainer;","\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { Component } from 'react';\r\nimport ToDoHead from './components/head/ToDoHead';\r\nimport ToDoItemList from './components/items/ToDoItemList';\r\nimport ToDoInputContainer from './components/add/ToDoInputContainer';\r\n\r\nconst localStorageKey = 'todo_kjt';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    input: '',\r\n    todoList: this.getItemFromLocalStorage()\r\n  }\r\n\r\n  refresh = (e) => {\r\n    window.location.reload();\r\n  }\r\n  \r\n  keyChange = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({\r\n      input: value\r\n    });\r\n  }\r\n\r\n  // localStorage 저장 데이터\r\n  // sample = {\r\n  //   guid: 'guid',\r\n  //   todoText: 'todo',\r\n  //   created: new Date(),\r\n  //   checked: true/false\r\n  // }\r\n\r\n  addTodoItem = (e) => {\r\n    if (this.state.input.length === 0) return;\r\n    let newItem = {\r\n      guid: this.createGuid(),\r\n      todoText: this.state.input,\r\n      created: this.getFormatDate((new Date())),\r\n      checked: false\r\n    };\r\n    this.setState({\r\n      input: '',\r\n      todoList: this.state.todoList.concat(newItem)\r\n    });\r\n    this.addItemToLocalStorage(newItem.guid, newItem.todoText, newItem.created);\r\n  }\r\n\r\n  updateTodoItem = (todo) => {\r\n    var dataList = this.getItemFromLocalStorage();\r\n    var updateTarget = dataList.find(d => d.guid === todo.guid);\r\n    if (!updateTarget) return;\r\n    updateTarget.checked = !todo.checked;\r\n    dataList = this.sortByChecked(dataList);\r\n    this.updateItemToLocalStorage(dataList);\r\n    this.setState({\r\n      todoList: dataList\r\n    });\r\n  }\r\n\r\n  createGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\n  getFormatDate(date) { \r\n    var year = date.getFullYear() - 2000;\t//yyyy \r\n    var month = (1 + date.getMonth());\t//M \r\n    month = month >= 10 ? month : '0' + month;\t//month 두자리로 저장 \r\n    var day = date.getDate();\t//d \r\n    day = day >= 10 ? day : '0' + day;\t//day 두자리로 저장 \r\n    return year + '-' + month + '-' + day; \r\n  }\r\n\r\n\r\n  // localStorage 관련\r\n\r\n  addItemToLocalStorage(guid, text, created) {\r\n    // 기존 데이터(또는 초기데이터)\r\n    var localDataStr = localStorage.getItem(localStorageKey) \r\n      ? localStorage.getItem(localStorageKey)\r\n      : \"[]\";\r\n    // 기존데이터에 저장하기 위해 파싱\r\n    var localData = JSON.parse(localDataStr);\r\n    localData.push({\r\n      guid: guid,\r\n      todoText: text,\r\n      created: created,\r\n      checked: false\r\n    });\r\n    localStorage.setItem(localStorageKey, JSON.stringify(localData));\r\n  }\r\n\r\n  updateItemToLocalStorage(dataList) {\r\n    this.clearLocalStorage();    \r\n    var encodedData = JSON.stringify(dataList);\r\n    localStorage.setItem(localStorageKey, encodedData);\r\n  }\r\n\r\n  getItemFromLocalStorage() {\r\n    var localStorageData = localStorage.getItem(localStorageKey);\r\n    var parsedData = localStorageData \r\n      ? JSON.parse(localStorageData)\r\n      : [];\r\n    var todoItemList = parsedData \r\n      ? parsedData\r\n      : [];\r\n    return this.sortByChecked(todoItemList);\r\n  }\r\n\r\n  deleteItemToLocalStorage = (guid) => {\r\n    // todo_kjt 키에 저장된 string 중 해당 todo 제거 후 덮어씌움\r\n    var localData = this.getItemFromLocalStorage();\r\n    if (!Array.isArray(localData) || localData.length < 1) return;\r\n    var filtered = localData.filter(d => d.guid !== guid);\r\n    this.setState({\r\n      todoList: filtered\r\n    });\r\n    localStorage.setItem(localStorageKey, JSON.stringify(filtered));\r\n  }\r\n\r\n  clearLocalStorage = (e) => {\r\n    this.setState({\r\n      todoList: []\r\n    });\r\n    localStorage.setItem(localStorageKey, []);\r\n  }\r\n\r\n  sortByChecked(dataList) {\r\n    // 체크한 아이템이 앞에 오도록 정렬\r\n    var checked = [];\r\n    var unchecked = [];\r\n    dataList.map(d => {\r\n      d.checked ? checked.push(d) : unchecked.push(d);\r\n    });\r\n    return checked.concat(unchecked);\r\n  }\r\n\r\n  render() {\r\n    const { input, todoList } = this.state;\r\n    const {\r\n      refresh,\r\n      keyChange,\r\n      addTodoItem,\r\n      updateTodoItem,\r\n      deleteItemToLocalStorage,\r\n      clearLocalStorage\r\n    } = this;\r\n\r\n    return (\r\n      <div className=\"App\">  \r\n        {/* Todolist 컴포넌트 배치 */}\r\n        <ToDoHead refreshFn={refresh}></ToDoHead>\r\n        <ToDoInputContainer \r\n          addTodoItemFn={addTodoItem} \r\n          input={input}\r\n          keyChange={keyChange}></ToDoInputContainer>\r\n        <ToDoItemList \r\n          todoItemList={todoList}\r\n          deleteItemToLocalStorageFn={deleteItemToLocalStorage}\r\n          clearFn={clearLocalStorage}\r\n          updateFn={updateTodoItem}></ToDoItemList> \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}